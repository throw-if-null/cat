name: CI

on:
  push:
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      DEFAULT_BRANCH: master
      DEFAULT_DOCKER_IMAGE_TAG: latest
      DOCKER_REPOSITORY: cat

    steps:

      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'javascript'

      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn
          cache: npm

      - name: NPM install
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Affected Tests
        run: npm run affected:test -- --base=origin/master --head=HEAD

      - name: E2E Test
        continue-on-error: true
        run: npm run e2e

      - name: Build
        run: npm run build

      - name: Code Coverage - Client
        uses: codecov/codecov-action@v1.5.2
        with:
          files: ./coverage/*/lcov.info
          name: Cat Code Coverage

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v1

      - name: Get branch Name
        id: get-branch-name
        run: echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV

      - name: Set default docker image tag
        id: set-default-docker-image-tag
        if: env.BRANCH != env.DEFAULT_BRANCH
        run: echo "DEFAULT_DOCKER_IMAGE_TAG=$(echo $BRANCH)" >> $GITHUB_ENV

      - name: Set unique docker image tag
        id: set-unique-docker-image-tag
        run: echo "DOCKER_TAG=$(echo $GITHUB_RUN_ID)" >> $GITHUB_ENV

      - name: Build Docker image
        id: docker-build-publish
        uses: elgohr/Publish-Docker-Github-Action@3.04
        with:
          name: throwifnull/${{ env.DOCKER_REPOSITORY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          context: .
          tags: "${{ env.DOCKER_TAG }},${{env.DEFAULT_DOCKER_IMAGE_TAG}}"

      - name: Print published docker image tags
        id: print-docker-image-tags
        run: |
          echo "Published Docker tags:"
          echo $DEFAULT_DOCKER_IMAGE_TAG
          echo $DOCKER_TAG
