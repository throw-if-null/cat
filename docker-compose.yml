version: "2.4"

# Templates:
x-base: &base-service-template
  init: true
  networks:
    local:

services:

  sqlserver:
    <<: *base-service-template
    container_name: sqlserver
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQLSERVER_SA_PASSWORD:-Password1!}
    ports:
      - "1433:1433"
    healthcheck:
      test: ./opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P Password1! -Q "SELECT 1" || exit 1
      interval: 2s
      timeout: 2s
      retries: 3
      start_period: 3s

  rat-api:
    <<: *base-service-template
    container_name: rat-api
    image: ghcr.io/throw-if-null/rat:latest
    #build:
    #  context: .
    #  dockerfile: Rat.Api/Dockerfile
    #  args:
    #    - PUBLISH_RESULT_PATH=Rat.Api/bin/Debug
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SqlConnectionFactoryOptions__ConnectionString=Data Source=sqlserver;Initial Catalog=RatDb;User ID=sa;Password=Password1!;Connect Timeout=30;Encrypt=False;
    healthcheck:
      test: curl --max-time "5" --no-buffer --fail http://rat-api/health/ready || exit 1
      interval: 2s
      timeout: 2s
      retries: 3
      start_period: 1s
    depends_on:
      sqlserver:
        condition: service_healthy
    ports:
      - "8485:80"

  shower:
    <<: *base-service-template
    container_name: shower
    image: mirzamerdovic/shower:latest
    environment:
      - SERVER_INSTANCE=sqlserver
      - USER_ID=sa
      - PASSWORD=Password1!
    volumes:
      - ./shower:/opt/mssql-tools/shower

volumes:
  database-data:

networks:
  local:
    name: local
